# SPDX-FileCopyrightText: none
# SPDX-License-Identifier: BSD-3-Clause

cmake_minimum_required(VERSION 3.16 FATAL_ERROR)

set(PIM_VERSION "6.5.40")
project(Akonadi-Calendar VERSION ${PIM_VERSION})

# ECM setup
set(KF_MIN_VERSION "6.17.0")
find_package(ECM ${KF_MIN_VERSION} CONFIG REQUIRED)
set(CMAKE_MODULE_PATH ${ECM_MODULE_PATH})
set(QT_REQUIRED_VERSION "6.8.0")

include(KDEInstallDirs)
include(KDECMakeSettings)
include(KDECompilerSettings NO_POLICY_SCOPE)

include(ECMGenerateExportHeader)
include(ECMGenerateHeaders)

include(ECMSetupVersion)
set(CMAKE_CXX_SCAN_FOR_MODULES OFF)
file(
    GLOB_RECURSE ALL_CLANG_FORMAT_SOURCE_FILES
    src/*.cpp
    src/*.h
    serializers/*.cpp
    serializers/*.h
    calendar-plugin/*.cpp
    calendar-plugin/*.h
    reminder-daemon/*.cpp
    reminder-daemon/*.h
)
set(PRE_COMMIT_INSTALLED FALSE)
if(${CMAKE_SOURCE_DIR} STREQUAL ${PROJECT_SOURCE_DIR})
    if(EXISTS "${PROJECT_SOURCE_DIR}/.git/hooks/pre-commit")
        file(READ "${PROJECT_SOURCE_DIR}/.git/hooks/pre-commit" FILE_CONTENTS)
        string(FIND "${FILE_CONTENTS}" "File generated by pre-commit" INDEX)
        if(${INDEX} GREATER_EQUAL 0)
            set(PRE_COMMIT_INSTALLED TRUE)
        endif()
    endif()
endif()
if(NOT ${PRE_COMMIT_INSTALLED})
    include(KDEGitCommitHooks)
    include(KDEClangFormat)
    kde_clang_format(${ALL_CLANG_FORMAT_SOURCE_FILES})
endif()

include(ECMQtDeclareLoggingCategory)
include(ECMDeprecationSettings)
include(ECMFeatureSummary)

include(ECMCheckOutboundLicense)
file(
    GLOB_RECURSE ALL_SOURCE_FILES
    src/*.cpp
    src/*.h
    serializers/*.cpp
    serializers/*.h
    calendar-plugin/*.cpp
    calendar-plugin/*.h
)
ecm_check_outbound_license(LICENSES GPL-2.0-only FILES ${ALL_SOURCE_FILES})

include(ECMAddQch)

set(KPIM_MIME_VERSION "6.5.40")
find_package(KPim6Mime ${KPIM_MIME_VERSION} CONFIG REQUIRED)
set(AKONADICALENDAR_LIB_VERSION ${PIM_VERSION})
set(AKONADICONTACT_LIB_VERSION "6.5.40")
set(AKONADIMIME_LIB_VERSION "6.5.40")
set(AKONADI_LIB_VERSION "6.5.40")
set(MAILTRANSPORT_LIB_VERSION "6.5.40")
set(CALENDARUTILS_LIB_VERSION "6.5.40")
set(IDENTITYMANAGEMENT_LIB_VERSION "6.5.40")
set(MESSAGECORE_LIB_VERSION "6.5.40")
set(MESSAGECOMPOSER_LIB_VERSION "6.5.40")
set(LIBKLEO_LIB_VERSION "6.5.40")
set(GPGME_LIB_VERSION "1.23.2")

ecm_setup_version(PROJECT VARIABLE_PREFIX AKONADICALENDAR
    VERSION_HEADER "${CMAKE_CURRENT_BINARY_DIR}/akonadi-calendar_version.h"
    PACKAGE_VERSION_FILE "${CMAKE_CURRENT_BINARY_DIR}/KPim6AkonadiCalendarConfigVersion.cmake"
    SOVERSION 6
)

ecm_setup_version(PROJECT VARIABLE_PREFIX AKONADICALENDARCORE
    VERSION_HEADER "${CMAKE_CURRENT_BINARY_DIR}/akonadi-calendar-core_version.h"
    PACKAGE_VERSION_FILE "${CMAKE_CURRENT_BINARY_DIR}/KPim6AkonadiCalendarCoreConfigVersion.cmake"
    SOVERSION 6
)

configure_file(akonadi-calendar-version.h.in ${CMAKE_CURRENT_BINARY_DIR}/src/akonadi-calendar-version.h @ONLY)

option(BUILD_QCH "Build API documentation in QCH format (for e.g. Qt Assistant, Qt Creator & KDevelop)" OFF)
add_feature_info(
    QCH
    ${BUILD_QCH}
    "API documentation in QCH format (for e.g. Qt Assistant, Qt Creator & KDevelop)"
)

if(BUILD_TESTING)
    add_definitions(-DBUILD_TESTING)
endif()

########### Find packages ###########
find_package(KF6I18n ${KF_MIN_VERSION} CONFIG REQUIRED)
find_package(KF6WidgetsAddons ${KF_MIN_VERSION} CONFIG REQUIRED)
find_package(KF6XmlGui ${KF_MIN_VERSION} CONFIG REQUIRED)
find_package(KF6KIO ${KF_MIN_VERSION} CONFIG REQUIRED)
find_package(KF6Codecs ${KF_MIN_VERSION} CONFIG REQUIRED)
find_package(KF6DBusAddons ${KF_MIN_VERSION} CONFIG REQUIRED)
find_package(KF6Notifications ${KF_MIN_VERSION} CONFIG REQUIRED)
find_package(KF6CalendarCore ${KF_MIN_VERSION} CONFIG REQUIRED)
find_package(KF6Crash ${KF_MIN_VERSION} CONFIG REQUIRED)

find_package(KPim6MailTransport ${MAILTRANSPORT_LIB_VERSION} CONFIG REQUIRED)
find_package(KPim6IdentityManagementCore ${IDENTITYMANAGEMENT_LIB_VERSION} CONFIG REQUIRED)
find_package(KPim6CalendarUtils ${CALENDARUTILS_LIB_VERSION} CONFIG REQUIRED)
find_package(KPim6MessageCore ${MESSAGECORE_LIB_VERSION} CONFIG REQUIRED)
find_package(KPim6MessageComposer ${MESSAGECOMPOSER_LIB_VERSION} CONFIG REQUIRED)
find_package(KPim6Libkleo ${LIBKLEO_LIB_VERSION} CONFIG REQUIRED)

find_package(KPim6Akonadi ${AKONADI_LIB_VERSION} CONFIG REQUIRED)
find_package(KPim6AkonadiContactCore ${AKONADICONTACT_LIB_VERSION} CONFIG REQUIRED)
find_package(KPim6AkonadiMime ${AKONADI_MIME_VERSION} CONFIG REQUIRED)

find_package(Gpgmepp ${GPGME_LIB_VERSION} CONFIG)
set_package_properties(
    Gpgmepp
    PROPERTIES
        DESCRIPTION
            "GpgME++ Library"
        URL
            "https://www.gnupg.org"
        TYPE
            REQUIRED
        PURPOSE
            "GpgME++ is required for OpenPGP support"
)
find_package(QGpgmeQt6 ${GPGME_LIB_VERSION} CONFIG REQUIRED)

########### Targets ###########

add_definitions(-DQT_NO_CONTEXTLESS_CONNECT)
ecm_set_disabled_deprecation_versions(QT 6.10.0 KF 6.18.0)

option(USE_UNITY_CMAKE_SUPPORT "Use UNITY cmake support (speedup compile time)" OFF)

set(COMPILE_WITH_UNITY_CMAKE_SUPPORT OFF)
if(USE_UNITY_CMAKE_SUPPORT)
    set(COMPILE_WITH_UNITY_CMAKE_SUPPORT ON)
    add_definitions(-DCOMPILE_WITH_UNITY_CMAKE_SUPPORT)
endif()

add_subdirectory(src)
add_subdirectory(serializers)
add_subdirectory(reminder-daemon)
add_subdirectory(calendar-plugin)
if(BUILD_TESTING)
    add_subdirectory(autotests)
endif()

########### CMake Config Files ###########
set(CMAKECONFIG_INSTALL_DIR_CORE "${KDE_INSTALL_CMAKEPACKAGEDIR}/KPim6AkonadiCalendarCore")

if(BUILD_QCH)
    ecm_install_qch_export(
        TARGETS KPim6AkonadiCalendarCore_QCH
        FILE KPim6AkonadiCalendarCoreQchTargets.cmake
        DESTINATION "${CMAKECONFIG_INSTALL_DIR_CORE}"
        COMPONENT Devel
    )
    set(PACKAGE_INCLUDE_QCHTARGETS_CORE
        "include(\"\${CMAKE_CURRENT_LIST_DIR}/KPim6AkonadiCalendarCoreQchTargets.cmake\")"
    )
endif()

configure_package_config_file(
    "${CMAKE_CURRENT_SOURCE_DIR}/KPimAkonadiCalendarCoreConfig.cmake.in"
    "${CMAKE_CURRENT_BINARY_DIR}/KPim6AkonadiCalendarCoreConfig.cmake"
    INSTALL_DESTINATION ${CMAKECONFIG_INSTALL_DIR_CORE}
)

install(
    FILES
        "${CMAKE_CURRENT_BINARY_DIR}/KPim6AkonadiCalendarCoreConfig.cmake"
        "${CMAKE_CURRENT_BINARY_DIR}/KPim6AkonadiCalendarCoreConfigVersion.cmake"
    DESTINATION "${CMAKECONFIG_INSTALL_DIR_CORE}"
    COMPONENT Devel
)

install(
    EXPORT KPim6AkonadiCalendarCoreTargets
    DESTINATION "${CMAKECONFIG_INSTALL_DIR_CORE}"
    FILE KPim6AkonadiCalendarCoreTargets.cmake
    NAMESPACE KPim6::
)

install(
    FILES
        ${CMAKE_CURRENT_BINARY_DIR}/akonadi-calendar-core_version.h
    DESTINATION ${KDE_INSTALL_INCLUDEDIR}/KPim6/AkonadiCalendarCore
    COMPONENT Devel
)

set(CMAKECONFIG_INSTALL_DIR "${KDE_INSTALL_CMAKEPACKAGEDIR}/KPim6AkonadiCalendar")

if(BUILD_QCH)
    ecm_install_qch_export(
        TARGETS KPim6AkonadiCalendar_QCH
        FILE KPim6AkonadiCalendarQchTargets.cmake
        DESTINATION "${CMAKECONFIG_INSTALL_DIR}"
        COMPONENT Devel
    )
    set(PACKAGE_INCLUDE_QCHTARGETS "include(\"\${CMAKE_CURRENT_LIST_DIR}/KPim6AkonadiCalendarQchTargets.cmake\")")
endif()

configure_package_config_file(
    "${CMAKE_CURRENT_SOURCE_DIR}/KPimAkonadiCalendarConfig.cmake.in"
    "${CMAKE_CURRENT_BINARY_DIR}/KPim6AkonadiCalendarConfig.cmake"
    INSTALL_DESTINATION ${CMAKECONFIG_INSTALL_DIR}
)

install(
    EXPORT KPim6AkonadiCalendarTargets
    DESTINATION "${CMAKECONFIG_INSTALL_DIR}"
    FILE KPim6AkonadiCalendarTargets.cmake
    NAMESPACE KPim6::
)

install(
    FILES
        ${CMAKE_CURRENT_BINARY_DIR}/akonadi-calendar_version.h
    DESTINATION ${KDE_INSTALL_INCLUDEDIR}/KPim6/AkonadiCalendar
    COMPONENT Devel
)

install(
    FILES
        "${CMAKE_CURRENT_BINARY_DIR}/KPim6AkonadiCalendarConfig.cmake"
        "${CMAKE_CURRENT_BINARY_DIR}/KPim6AkonadiCalendarConfigVersion.cmake"
    DESTINATION "${CMAKECONFIG_INSTALL_DIR}"
    COMPONENT Devel
)

ecm_qt_install_logging_categories(
    EXPORT AKONADI-CALENDAR
    FILE akonadi-calendar.categories
    DESTINATION ${KDE_INSTALL_LOGGINGCATEGORIESDIR}
)

if(DEFINED kde_configure_git_pre_commit_hook)
    kde_configure_git_pre_commit_hook(CHECKS CLANG_FORMAT)
endif()
ki18n_install(po)
ecm_feature_summary(WHAT ALL FATAL_ON_MISSING_REQUIRED_PACKAGES)
